/* 
  内容解释.strings
  平衡二叉搜索树

  Created by 浮东凯 on 2021/7/10.
  Copyright © 2021 FDK. All rights reserved.
*/

/*
 // 平衡balance：当节点数量固定时，左右子数的高度越接近，这颗二叉树就越平衡
 // 理想平衡 就像是完全二叉树，满二叉树
 // 如何改进二叉搜索树
 // 1.添加删除顺序上 是不可以限制的
 // 所以改进方案 在添加删除的操作 想办法让二叉搜索树回复平衡 （减小树的高度）
 // 调整次数太大 付出代价会很大 所以总结来说，尽量少的调整次数来达到适度的平衡就好了
 // 一棵适度平衡的二叉搜索树 称之为 平衡二叉搜索树
 // 简称 BBSt
 // AVL树  红黑树  也是 平衡二叉树
 
 
 AVL树
 
 平衡因子？： 某节点的左右子数的高度差
 
 AVL 树的特点
 
 每个节点的平衡因子 只可能是 1 0 -1（绝对值<=1，如果超过1 称之为 失衡）
 每个节点的左右子数高度h差不回超过1
 搜索添加删除的时间复杂度 是 o(log n)
 
 @添加导致的失衡：
 
 1.可能回导致所有的祖先节点都失衡
 
 2.父节点。非祖先节点 都不可能失衡
 n -> node    p ->parent   g ->grandParent
 LL - 右旋转（单旋） left -left
 
                g
             ---|---
             |      |
            p
         ---|---
         |      |
         n
      ---|---
      |      |
    (树的某一角落的视角)
 
 如果在节点 n 做子数插入节点。那么就会导致 g 节点失衡 做子数高度为3 柚子树高度为1 高度差叉过了1导致失衡
 那么我们进行 LL - 右旋转 来进行 平衡
 
 操作时：  g.left = p.right;
          p.right = g;
          让p成为这颗子数的根节点。
          仍然是一颗二叉搜索树：
          整棵树达到平衡
 
 注意维护的内容  p g 的parent 的属性
  更新高度
 
 
 
 @。RR - 左旋转（单旋转）
 类比右旋转
                            g
                         ---|---
                         |      |
                                p
                             ---|---
                             |      |
                                    n
                                 ---|---
                                 |      |
 操作:  g.right = p.left;
        p.left = g;
 让p成为这颗子数的根节点。
 仍然是一颗二叉搜索树：
 整棵树达到平衡
 
 注意维护的内容  p g 的parent 的属性
 更新高度
 
 
 @LR - RR左旋转 LL右旋转。（双旋）
                    g
                 ---|---
                 |      |
                 p
              ---|---        -》 先对p进行左旋转 得到 下面的情况
              |      |
                     n
                  ---|---
                  |      |
                         addNode
 
 
                    g
                 ---|---
                 |      |
                 n
              ---|---           -》然后进行我们所知的右旋转LL
              |      |
              p
           ---|---
           |      |
 
 
  @RL -  LL右旋转 RR左旋转 （双旋）
                    g
                 ---|---
                 |      |
                        p
                     ---|---        -》 先对p进行左旋转 得到 下面的情况
                     |      |
                     n
                 ---|---
                 |      |
              addNode
 
   得到下面：
                        g
                     ---|---
                     |      |
                            n
                         ---|---           -》然后进行我们所知的左旋转 RR
                         |      |
                                p
                             ---|---
                             |      |
 
 
 
 
 
 */
